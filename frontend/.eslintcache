[{"/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/containers/go.js":"1","/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/index.js":"2","/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/useClientSocket.js":"3","/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/components/privateRoute.js":"4","/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/axios.js":"5","/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/components/myProfile.js":"6","/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/components/line.js":"7","/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/components/grid.js":"8","/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/components/UserMenu.js":"9","/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/components/board.js":"10","/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/components/star.js":"11"},{"size":4689,"mtime":1611224150658,"results":"12","hashOfConfig":"13"},{"size":635,"mtime":1611151230541,"results":"14","hashOfConfig":"13"},{"size":1481,"mtime":1611226153576,"results":"15","hashOfConfig":"13"},{"size":778,"mtime":1611146493907,"results":"16","hashOfConfig":"13"},{"size":1104,"mtime":1611226131408,"results":"17","hashOfConfig":"13"},{"size":479,"mtime":1611207035162,"results":"18","hashOfConfig":"13"},{"size":798,"mtime":1611159763395,"results":"19","hashOfConfig":"13"},{"size":2439,"mtime":1611201121066,"results":"20","hashOfConfig":"13"},{"size":2383,"mtime":1611225895322,"results":"21","hashOfConfig":"13"},{"size":510,"mtime":1611159763372,"results":"22","hashOfConfig":"13"},{"size":803,"mtime":1611133872912,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"kzbzoi",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/containers/go.js",["48","49","50","51"],"import React, {useState, useEffect, useRef} from 'react'\nimport {makeMove} from '../axios.js';\n\nimport Board from '../components/board.js'\nimport Line from '../components/line.js'\nimport Index from '../components/index.js'\nimport Star from '../components/star.js'\nimport black_stone from '../img/black-stone.png'\nimport white_stone from '../img/white-stone.png'\nimport black_stone_focus from '../img/black-stone-focus.png'\nimport white_stone_focus from '../img/white-stone-focus.png'\nimport empty_stone from '../img/empty-stone.png'\nimport '../style.css'\n\nconst boardSize = 19\n\nconst Go = (props) => {\n    const {color: myColor, opponent: myOpponentName, stepReceivedStr: opponentStepStr, \n         boardId, userId, history} = props;\n    const [record, setRecord] = useState(Array.from(Array(boardSize), _ => Array(boardSize).fill(0))) // EMPTY, BLACK, WHITE = 0, 1, 2\n    const [stepCount, setStepCount] = useState(1);\n    // const [curPlayer, setCurPlayer] = useState(0) // BLACK, WHITE = 0, 1 timer running\n    // const [curPosition, setCurPosition] = useState({row: -1, column: -1})\n    const [meToPlay, setMeToPlay] = useState(myColor==='black'? true:false);\n    const [myPosition, setMyPosition] = useState('-1@-1');\n    const [opponentPosition, setOpponentPosition] = useState('-1@-1');\n    const [stone, setStone] = useState(Array.from(Array(boardSize), _ => Array(boardSize).fill(empty_stone)))\n    const [isEnd, setIsEnd] = useState(false);\n    const [isWin, setIsWin] = useState(\"\");\n\n    const makeSurrender = () => {\n        console.log('Surrender Make')\n        makeMove(boardId, userId, {flag: 'surrender', pos:{row: -1, col: -1} })\n        setMeToPlay(false);\n        setIsEnd(true);\n        setIsWin('Lose');\n    }\n    const makeDone = () => {\n        if(!meToPlay) return;\n        console.log('Done Make')\n        makeMove(boardId, userId, {flag: 'done', pos:{row: -1, col: -1} })\n        setMeToPlay(false);\n    }\n    const backToHome = () =>{\n        history.push('/user');\n    }\n    useEffect(()=>{\n        if(opponentStepStr==='-1@-1') return;\n        console.log('opponent string', opponentStepStr)\n        setOpponentPosition(opponentStepStr);\n        const [opponentRow, opponentCol] = opponentStepStr.split('@');\n        if(opponentRow === 's'){\n            setIsEnd(true);\n            setIsWin('Win');\n            return;\n        }\n        const [myCurRow, myCurCol] = myPosition.split('@');\n        record[opponentRow][opponentCol] = stepCount;\n        setStepCount(stepCount+1);\n        setMeToPlay(true);\n        if(myColor==='black'){\n            stone[opponentRow][opponentCol] = white_stone_focus\n            if(myCurRow!=='-1' &&myCurCol!=='-1'){\n                stone[myCurRow][myCurCol] = black_stone;\n            }\n        }else{\n            stone[opponentRow][opponentCol] = black_stone_focus\n            if(myCurRow!=='-1' &&myCurCol!=='-1'){\n                stone[myCurRow][myCurCol] = white_stone;\n            }\n        }\n        setStone(stone)\n    },[opponentStepStr])\n\n    useEffect(()=>{\n        if(myPosition==='-1@-1')return;\n        if(!meToPlay){\n            const [row, col] = myPosition.split('@')\n            makeMove(boardId, userId, {flag: 'step', pos:{row: row, col: col} })\n        }\n    },[myPosition])\n\n    return (\n        <div>\n            <h1 className=\"title glow-on-hover\">GO game</h1>\n            <div className=\"game-info\">\n                <h2>My color : {myColor}</h2>\n                <h2>My Opponent: {myOpponentName}</h2>\n            </div>\n            <div className=\"board-root\">\n                <Board boardSize={boardSize} record={record} setRecord={setRecord} meToPlay={meToPlay}\n                setMeToPlay={setMeToPlay} myPosition={myPosition} setMyPosition={setMyPosition} opponentPosition={opponentPosition}\n                stone={stone} setStone={setStone} stepCount={stepCount} setStepCount={setStepCount} myColor={myColor}/>\n                <Line boardSize={boardSize} />\n                <Index boardSize={boardSize} />\n                <Star boardSize={boardSize} />\n            </div>\n            <div className=\"go-button-root\">\n                <div onClick={makeSurrender}>\n                    <button className=\"go-button\">Surrender</button>\n                </div>\n                <div onClick={backToHome}>\n                    {isEnd? (<button className=\"go-button\">Back to Home</button>):(<></>)} \n                </div>\n            </div>\n            {isWin===''?(<></>): (<WinStatus isWin={isWin}/>)}\n        </div>\n    )\n}\nconst WinStatus = (props) => {\n    const {isWin} = props;\n    return(\n        <>\n            <h1 className=\"you-win\">{\"You \" + isWin}</h1>\n        </>\n    )\n}\nexport default Go\n",["52","53"],"/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/index.js",[],"/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/useClientSocket.js",[],"/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/components/privateRoute.js",[],"/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/axios.js",[],"/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/components/myProfile.js",[],"/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/components/line.js",[],"/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/components/grid.js",["54","55","56","57","58"],"/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/components/UserMenu.js",["59","60","61"],"/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/components/board.js",[],"/Users/hansli112/NTU/Senior/Web Programming/Online-GO/frontend/src/components/star.js",[],{"ruleId":"62","severity":1,"message":"63","line":1,"column":37,"nodeType":"64","messageId":"65","endLine":1,"endColumn":43},{"ruleId":"62","severity":1,"message":"66","line":38,"column":11,"nodeType":"64","messageId":"65","endLine":38,"endColumn":19},{"ruleId":"67","severity":1,"message":"68","line":73,"column":7,"nodeType":"69","endLine":73,"endColumn":24,"suggestions":"70"},{"ruleId":"67","severity":1,"message":"71","line":81,"column":7,"nodeType":"69","endLine":81,"endColumn":19,"suggestions":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"62","severity":1,"message":"77","line":1,"column":16,"nodeType":"64","messageId":"65","endLine":1,"endColumn":24},{"ruleId":"62","severity":1,"message":"78","line":11,"column":25,"nodeType":"64","messageId":"65","endLine":11,"endColumn":34},{"ruleId":"62","severity":1,"message":"79","line":14,"column":12,"nodeType":"64","messageId":"65","endLine":14,"endColumn":17},{"ruleId":"62","severity":1,"message":"80","line":14,"column":19,"nodeType":"64","messageId":"65","endLine":14,"endColumn":24},{"ruleId":"81","severity":1,"message":"82","line":66,"column":12,"nodeType":"83","endLine":67,"endColumn":103},{"ruleId":"62","severity":1,"message":"84","line":7,"column":17,"nodeType":"64","messageId":"65","endLine":7,"endColumn":25},{"ruleId":"62","severity":1,"message":"85","line":9,"column":8,"nodeType":"64","messageId":"65","endLine":9,"endColumn":19},{"ruleId":"67","severity":1,"message":"86","line":18,"column":8,"nodeType":"69","endLine":18,"endColumn":10,"suggestions":"87"},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'makeDone' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'myColor', 'myPosition', 'record', 'stepCount', and 'stone'. Either include them or remove the dependency array. You can also do a functional update 'setStepCount(s => ...)' if you only need 'stepCount' in the 'setStepCount' call.","ArrayExpression",["88"],"React Hook useEffect has missing dependencies: 'boardId', 'meToPlay', and 'userId'. Either include them or remove the dependency array.",["89"],"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"'useState' is defined but never used.","'boardSize' is assigned a value but never used.","'myRow' is assigned a value but never used.","'myCol' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Redirect' is defined but never used.","'waiting_img' is defined but never used.","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["92"],{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},"Update the dependencies array to be: [myColor, myPosition, opponentStepStr, record, stepCount, stone]",{"range":"99","text":"100"},"Update the dependencies array to be: [boardId, meToPlay, myPosition, userId]",{"range":"101","text":"102"},"Update the dependencies array to be: [userId]",{"range":"103","text":"104"},[2993,3010],"[myColor, myPosition, opponentStepStr, record, stepCount, stone]",[3246,3258],"[boardId, meToPlay, myPosition, userId]",[778,780],"[userId]"]